{"ast":null,"code":"var _jsxFileName = \"/Users/young/Desktop/react/0624/src/components/Plus.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const [value, setValue] = useState(0);\n  const plus = useCallback(() => {\n    setValue(value + 1);\n  }, [value]); // value가 업데이트 되면 이 함수도 실행됨.\n  //useCallback : 겉으로 나타나는 변화는 없음. 메모리를 아낄 수 있음\n  //state 업데이트시 컴포넌트 처음부터 끝까지 다시 렌더링 됨. 10번 plus 함수를 실행시키면 Counter 함수가 10번 생성됨. 가비지컬렉팅..? 계속 다시만들어질때마다 counter가 참조하는 메모리가 다 생김. 사용하지 않는 메모리는 알아서 정리되어(가비지컬렉팅) 쌓이진 않음. 하지만 그렇게 되지 않도록 useCallback 사용.\n\n  /* useCallback(\n    ()=> {\n     }, [dependency]) */\n\n  const resetPlus = () => {\n    setValue(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \\uAC12 : \", value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: plus,\n      children: \"plus +\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetPlus,\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"bL8FY9CKXRtrkGal0kelWu8p9xk=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["React","useCallback","useState","Counter","value","setValue","plus","resetPlus"],"sources":["/Users/young/Desktop/react/0624/src/components/Plus.jsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nconst Counter = () => {\n  const [value, setValue] = useState(0);\n\n  const plus = useCallback(() => {\n    setValue(value + 1);\n  }, [value]); // value가 업데이트 되면 이 함수도 실행됨.\n  //useCallback : 겉으로 나타나는 변화는 없음. 메모리를 아낄 수 있음\n  //state 업데이트시 컴포넌트 처음부터 끝까지 다시 렌더링 됨. 10번 plus 함수를 실행시키면 Counter 함수가 10번 생성됨. 가비지컬렉팅..? 계속 다시만들어질때마다 counter가 참조하는 메모리가 다 생김. 사용하지 않는 메모리는 알아서 정리되어(가비지컬렉팅) 쌓이진 않음. 하지만 그렇게 되지 않도록 useCallback 사용.\n\n  /* useCallback(\n    ()=> {\n\n    }, [dependency]) */\n\n  const resetPlus = () => {\n    setValue(0);\n  };\n\n  return (\n    <div>\n      <h1> 값 : {value}</h1>\n      <button onClick={plus}>plus +</button>\n      <button onClick={resetPlus}>reset</button>\n    </div>\n  );\n};\n\nexport default Counter;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC;EAEA,MAAMI,IAAI,GAAGL,WAAW,CAAC,MAAM;IAC7BI,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;EACD,CAFuB,EAErB,CAACA,KAAD,CAFqB,CAAxB,CAHoB,CAKP;EACb;EACA;;EAEA;AACF;AACA;;EAGE,MAAMG,SAAS,GAAG,MAAM;IACtBF,QAAQ,CAAC,CAAD,CAAR;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE;MAAA,yBAAUD,KAAV;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAEE,IAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,OAAO,EAAEC,SAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CAzBD;;GAAMJ,O;;KAAAA,O;AA2BN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}